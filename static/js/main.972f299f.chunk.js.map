{"version":3,"sources":["serviceWorkerRegistration.js","components/Clock.jsx","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","formatNumber","n","Clock","Time","h","hours","m","minutes","s","seconds","className","getTime","date","Date","getHours","getMinutes","getSeconds","App","useState","time","setTime","update","now","red","green","blue","document","body","style","backgroundColor","changeBackground","useEffect","ms","getMilliseconds","setTimeout","setInterval","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"sKAAMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,M,kBCpF3DC,EAAe,SAACC,GACpB,OAAIA,EAAI,GAAU,IAAN,OAAWA,GACjB,GAAN,OAAUA,IAaGC,EAVD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACAC,EAA8BD,EAArCE,MAAmBC,EAAkBH,EAA3BI,QAAqBC,EAAML,EAAfM,QAE9B,OACE,mBAAGC,UAAU,QAAb,mBACMV,EAAaI,GADnB,YACyBJ,EAAaM,GADtC,YAC4CN,EAAaQ,OCPvDG,EAAU,WAAwB,IAAvBC,EAAsB,uDAAf,IAAIC,KAC1B,MAAO,CACLR,MAAOO,EAAKE,WACZP,QAASK,EAAKG,aACdN,QAASG,EAAKI,eAyCHC,EAjCH,WAAO,IAAD,EACQC,mBAASP,KADjB,mBACTQ,EADS,KACHC,EADG,KAGVC,EAAS,WACb,IAAIC,EAAMX,IACVS,EAAQE,GATa,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACtCC,SAASC,KAAKC,MAAMC,gBAApB,cAA6CN,EAA7C,YAAoDC,EAApD,YAA6DC,EAA7D,KAUEK,CAAiB,CACfP,IAAKD,EAAIjB,MACTmB,MAAOF,EAAIf,QACXkB,KAAMH,EAAIb,WAgBd,OAZAsB,qBAAU,WACR,IACIC,GADM,IAAInB,MACDoB,kBAGbC,YAAW,WACTC,aAAY,WACVd,MACC,OACF,IAAOW,KACT,IAGD,qBAAKtB,UAAU,SAAf,SACE,cAAC,EAAD,CAAOP,KAAMgB,OCtCnBiB,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFZ,SAASa,eAAe,SHCnB,SAAkBzD,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIyD,IAAIC,oBAAwBjE,OAAOC,SAASiE,MACpDC,SAAWnE,OAAOC,SAASkE,OAIvC,OAGFnE,OAAOoE,iBAAiB,QAAQ,WAC9B,IAAM/D,EAAK,UAAM4D,oBAAN,sBAEPnE,IAgEV,SAAiCO,EAAOC,GAEtC+D,MAAMhE,EAAO,CACXiE,QAAS,CAAE,iBAAkB,YAE5B5D,MAAK,SAAC6D,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CpE,UAAUC,cAAcoE,MAAMlE,MAAK,SAACC,GAClCA,EAAakE,aAAanE,MAAK,WAC7BV,OAAOC,SAAS6E,eAKpB1E,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFA4D,CAAwB1E,EAAOC,GAI/BC,UAAUC,cAAcoE,MAAMlE,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OG1B/B0E,K","file":"static/js/main.972f299f.chunk.js","sourcesContent":["const isLocalhost = Boolean(\n  window.location.hostname === \"localhost\" ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === \"[::1]\" ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === \"production\" && \"serviceWorker\" in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener(\"load\", () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            \"This web app is being served cache-first by a service \" +\n              \"worker. To learn more, visit https://cra.link/PWA\"\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then((registration) => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === \"installed\") {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                \"New content is available and will be used when all \" +\n                  \"tabs for this page are closed. See https://cra.link/PWA.\"\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log(\"Content is cached for offline use.\");\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch((error) => {\n      console.error(\"Error during service worker registration:\", error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { \"Service-Worker\": \"script\" },\n  })\n    .then((response) => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get(\"content-type\");\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf(\"javascript\") === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then((registration) => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        \"No internet connection found. App is running in offline mode.\"\n      );\n    });\n}\n\nexport function unregister() {\n  if (\"serviceWorker\" in navigator) {\n    navigator.serviceWorker.ready\n      .then((registration) => {\n        registration.unregister();\n      })\n      .catch((error) => {\n        console.error(error.message);\n      });\n  }\n}\n","const formatNumber = (n) => {\r\n  if (n < 10) return `0${n}`;\r\n  return `${n}`;\r\n};\r\n\r\nconst Clock = ({ Time }) => {\r\n  const { hours: h, minutes: m, seconds: s } = Time\r\n\r\n  return (\r\n    <p className='Clock'>\r\n      {`${formatNumber(h)}:${formatNumber(m)}:${formatNumber(s)}`}\r\n    </p>\r\n  )\r\n}\r\n\r\nexport default Clock","import { useState, useEffect } from \"react\";\nimport Clock from \"./components/Clock\";\n\nconst getTime = (date = new Date()) => {\n  return {\n    hours: date.getHours(),\n    minutes: date.getMinutes(),\n    seconds: date.getSeconds(),\n  };\n};\n\nconst changeBackground = ({ red, green, blue }) => {\n  document.body.style.backgroundColor = `rgb(${red},${green},${blue})`;\n};\n\nconst App = () => {\n  const [time, setTime] = useState(getTime());\n\n  const update = () => {\n    let now = getTime();\n    setTime(now);\n\n    changeBackground({\n      red: now.hours,\n      green: now.minutes,\n      blue: now.seconds,\n    });\n  };\n\n  useEffect(() => {\n    let now = new Date();\n    let ms = now.getMilliseconds();\n\n    // with this the interval start at 0 milliseconds\n    setTimeout(() => {\n      setInterval(() => {\n        update();\n      }, 1000);\n    }, 1000 - ms);\n  }, []);\n\n  return (\n    <div className=\"center\">\n      <Clock Time={time} />\n    </div>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport * as serviceWorkerRegistration from \"./serviceWorkerRegistration\";\nimport App from \"./App\";\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById(\"root\")\n);\n\nserviceWorkerRegistration.register();\n"],"sourceRoot":""}