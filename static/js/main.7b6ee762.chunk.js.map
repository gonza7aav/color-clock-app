{"version":3,"sources":["serviceWorkerRegistration.js","components/Clock.jsx","App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","formatNumber","n","Clock","time","h","hours","m","minutes","s","seconds","style","padding","fontSize","getTime","date","Date","getHours","getMinutes","getSeconds","App","useState","setTime","updateTime","now","red","green","blue","document","body","backgroundColor","changeBackground","useEffect","ms","getMilliseconds","setTimeout","setInterval","className","ReactDOM","render","StrictMode","getElementById","URL","process","href","origin","addEventListener","fetch","headers","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"8JAAMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAACC,GACLA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,+GAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAACC,GACNL,QAAQK,MAAM,4CAA6CA,M,kBCpF3DC,EAAe,SAACC,GACpB,OAAIA,EAAI,GAAU,IAAN,OAAWA,GACjB,GAAN,OAAUA,IAkBGC,EAfD,SAAC,GAAc,IAAZC,EAAW,EAAXA,KACAC,EAA8BD,EAArCE,MAAmBC,EAAkBH,EAA3BI,QAAqBC,EAAML,EAAfM,QAO9B,OACE,mBAAGC,MANS,CACZC,QAAS,iBACTC,SAAU,QAIV,mBACMZ,EAAaI,GADnB,YACyBJ,EAAaM,GADtC,YAC4CN,EAAaQ,OCZvDK,EAAU,WACd,IAAIC,EAAO,IAAIC,KACf,MAAO,CACLV,MAAOS,EAAKE,WACZT,QAASO,EAAKG,aACdR,QAASK,EAAKI,eA8CHC,EAzCH,WAAO,IAAD,EACQC,mBAASP,KADjB,mBACTV,EADS,KACHkB,EADG,KAOVC,EAAa,WACjB,IAAIC,EAAMV,IACVQ,EAAQE,GANe,SAAC,GAA0B,IAAxBC,EAAuB,EAAvBA,IAAKC,EAAkB,EAAlBA,MAAOC,EAAW,EAAXA,KACtCC,SAASC,KAAKlB,MAAMmB,gBAApB,cAA6CL,EAA7C,YAAoDC,EAApD,YAA6DC,EAA7D,KAMAI,CAAiB,CACfN,IAAKD,EAAIlB,MACToB,MAAOF,EAAIhB,QACXmB,KAAMH,EAAId,WAqBd,OAjBAsB,qBAAU,WAERT,IAGA,IACIU,GADM,IAAIjB,MACDkB,kBACbC,YAAW,WACTZ,IAGAa,aAAY,WACVb,MACC,OACF,IAAOU,KACT,IAGD,qBAAKI,UAAU,SAAf,SACE,cAAC,EAAD,CAAOjC,KAAMA,OC5CnBkC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFZ,SAASa,eAAe,SHCnB,SAAkB1D,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAI0D,IAAIC,gBAAwBlE,OAAOC,SAASkE,MACpDC,SAAWpE,OAAOC,SAASmE,OAIvC,OAGFpE,OAAOqE,iBAAiB,QAAQ,WAC9B,IAAMhE,EAAK,UAAM6D,gBAAN,sBAEPpE,IAgEV,SAAiCO,EAAOC,GAEtCgE,MAAMjE,EAAO,CACXkE,QAAS,CAAE,iBAAkB,YAE5B7D,MAAK,SAAC8D,GAEL,IAAMC,EAAcD,EAASD,QAAQG,IAAI,gBAEnB,MAApBF,EAASG,QACO,MAAfF,IAA8D,IAAvCA,EAAYG,QAAQ,cAG5CrE,UAAUC,cAAcqE,MAAMnE,MAAK,SAACC,GAClCA,EAAamE,aAAapE,MAAK,WAC7BV,OAAOC,SAAS8E,eAKpB3E,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEAvFA6D,CAAwB3E,EAAOC,GAI/BC,UAAUC,cAAcqE,MAAMnE,MAAK,WACjCQ,QAAQC,IACN,+GAMJf,EAAgBC,EAAOC,OG1B/B2E,K","file":"static/js/main.7b6ee762.chunk.js","sourcesContent":["const isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","const formatNumber = (n) => {\r\n  if (n < 10) return `0${n}`;\r\n  return `${n}`;\r\n};\r\n\r\nconst Clock = ({ time }) => {\r\n  const { hours: h, minutes: m, seconds: s } = time;\r\n\r\n  const style = {\r\n    padding: '0.25rem 0.5rem',\r\n    fontSize: '10vw',\r\n  };\r\n\r\n  return (\r\n    <p style={style}>\r\n      {`${formatNumber(h)}:${formatNumber(m)}:${formatNumber(s)}`}\r\n    </p>\r\n  );\r\n};\r\n\r\nexport default Clock;\r\n","import { useState, useEffect } from 'react';\r\nimport Clock from './components/Clock';\r\n\r\nconst getTime = () => {\r\n  let date = new Date();\r\n  return {\r\n    hours: date.getHours(),\r\n    minutes: date.getMinutes(),\r\n    seconds: date.getSeconds(),\r\n    // milliseconds: date.getMilliseconds(),\r\n  };\r\n};\r\n\r\nconst App = () => {\r\n  const [time, setTime] = useState(getTime());\r\n\r\n  const changeBackground = ({ red, green, blue }) => {\r\n    document.body.style.backgroundColor = `rgb(${red},${green},${blue})`;\r\n  };\r\n\r\n  const updateTime = () => {\r\n    let now = getTime();\r\n    setTime(now);\r\n    changeBackground({\r\n      red: now.hours,\r\n      green: now.minutes,\r\n      blue: now.seconds,\r\n    });\r\n  };\r\n\r\n  useEffect(() => {\r\n    // right after loading everything, update the clock\r\n    updateTime();\r\n\r\n    // the timeout will be executed in the beginning of the next second\r\n    let now = new Date();\r\n    let ms = now.getMilliseconds();\r\n    setTimeout(() => {\r\n      updateTime();\r\n\r\n      // the interval will be executed every second passed\r\n      setInterval(() => {\r\n        updateTime();\r\n      }, 1000);\r\n    }, 1000 - ms);\r\n  }, []);\r\n\r\n  return (\r\n    <div className='center'>\r\n      <Clock time={time} />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default App;\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\nimport App from './App';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\nserviceWorkerRegistration.register();\r\n"],"sourceRoot":""}